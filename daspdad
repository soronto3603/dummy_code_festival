[1mdiff --git a/merge_sort.py b/merge_sort.py[m
[1mdeleted file mode 100644[m
[1mindex 14a44bd..0000000[m
[1m--- a/merge_sort.py[m
[1m+++ /dev/null[m
[36m@@ -1,20 +0,0 @@[m
[31m-def mergeSort(alist):[m
[31m-    if len(alist) <= 1:[m
[31m-        return alist[m
[31m-    mid = len(alist) // 2[m
[31m-    leftlist = alist[:mid][m
[31m-    rightlist = alist[mid:][m
[31m-    L = mergeSort(leftlist)[m
[31m-    R = mergeSort(rightlist)[m
[31m-    i = j = 0[m
[31m-    result = [][m
[31m-    while i < len(L) and j < len(R):[m
[31m-        if L[i] < R[j]:[m
[31m-            result.append(L[i])[m
[31m-            i+=1[m
[31m-        else:[m
[31m-            result.append(R[j])[m
[31m-            j+=1[m
[31m-    result += L[i:][m
[31m-    result += R[j:][m
[31m-    return result[m
\ No newline at end of file[m
[1mdiff --git a/quick_sort.py b/quick_sort.py[m
[1mdeleted file mode 100644[m
[1mindex d13ece6..0000000[m
[1m--- a/quick_sort.py[m
[1m+++ /dev/null[m
[36m@@ -1,26 +0,0 @@[m
[31m-def partition(alist, start, end):[m
[31m-    pivot = alist[start][m
[31m-    left = start+1[m
[31m-    right = end[m
[31m-    done = False[m
[31m-    while not done:[m
[31m-        while left <= right and alist[left] <= pivot:[m
[31m-            left += 1[m
[31m-        while alist[right] >= pivot and right >= left:[m
[31m-            right -= 1[m
[31m-    if right < left:[m
[31m-            done = True[m
[31m-        else:[m
[31m-            tmp = alist[left][m
[31m-            alist[left] = alist[right][m
[31m-            alist[right] = tmp[m
[31m-    tmp = alist[start][m
[31m-    alist[start] = alist[right][m
[31m-    alist[right] = tmp[m
[31m-    return right[m
[31m-def quickSort(alist, start, end):[m
[31m-    if start < end:[m
[31m-        pivot = partition(alist, start, end)[m
[31m-        quickSort(alist, start, pivot-1)[m
[31m-        quickSort(alist, pivot+1, end)[m
[31m-    return alist[m
\ No newline at end of file[m
